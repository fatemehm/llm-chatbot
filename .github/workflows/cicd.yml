name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: fatemehmsy179

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Black (formatting check)
        run: |
          python -m pip install --upgrade pip
          pip install black==24.4.2
          black  .
        continue-on-error: false

      - name: Run isort (import sorting check)
        run: isort --check-only app/ tests/ train.py
        continue-on-error: false

      - name: Run Flake8 (linting)
        run: flake8 app/ tests/ train.py --max-line-length=88
        continue-on-error: false

      - name: Run MyPy (type checking)
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7
  data-quality:
    name: Data Quality Validation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Validate data quality
        run: |
          python data_validation/validate_data.py

      - name: Upload validation reports
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: data_validation/reports/
          retention-days: 7

  sonarqube:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  dvc-check:
    name: DVC Data Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install DVC
        run: pip install dvc

      - name: Check DVC files
        run: |
          dvc status
          # Optionally: dvc pull (if you have remote storage configured)
  build-docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, data-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for FastAPI
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/llm-chatbot
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push FastAPI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/llm-chatbot:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/llm-chatbot:buildcache,mode=max

      - name: Extract metadata for Streamlit
        id: meta-streamlit
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.streamlit
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta-streamlit.outputs.tags }}
          labels: ${{ steps.meta-streamlit.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit:buildcache,mode=max

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Run Trivy for FastAPI
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/llm-chatbot:latest
          format: 'sarif'
          output: 'trivy-api-results.sarif'
          timeout: '10m'  # Increase timeout
          severity: 'CRITICAL,HIGH'  # Only scan for critical/high
          scanners: 'vuln'  # Skip secret scanning for speed
        continue-on-error: true

      - name: Run Trivy for Streamlit
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit:latest
          format: 'sarif'
          output: 'trivy-streamlit-results.sarif'
          timeout: '10m'  # Increase timeout
          severity: 'CRITICAL,HIGH'  # Only scan for critical/high
          scanners: 'vuln'  # Skip secret scanning for speed
        continue-on-error: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-api-results.sarif'
        continue-on-error: true
        if: always()

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: always()
    steps:
      - name: Check deployment status
        run: |
          echo "==================================="
          echo "CI/CD Pipeline Results"
          echo "==================================="
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Data Quality: ${{ needs.data-quality.result }}"
          echo "Docker Build: ${{ needs.build-docker.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "==================================="

          if [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "Deployment successful!"
            echo "Docker images:"
            echo "  - ${{ env.DOCKER_REGISTRY }}/llm-chatbot:latest"
            echo "  - ${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit:latest"
          else
            echo "Deployment failed!"
          fi

  integration-test:
    name: Integration Tests (Post-Deploy)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Pull Docker images
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/llm-chatbot:latest
          docker pull ${{ env.DOCKER_REGISTRY }}/llm-chatbot-streamlit:latest

      - name: Start services
        run: |
          docker-compose up -d
          sleep 15

      - name: Test API health
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Test Streamlit health
        run: |
          curl -f http://localhost:8501/_stcore/health || exit 1

      - name: Stop services
        run: docker-compose down

  performance-test:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Locust
        run: pip install locust

      - name: Pull and start services
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/llm-chatbot:latest
          docker-compose up -d
          sleep 15

      - name: Run load test
        run: |
          # Simple load test (1 user, 10 requests)
          locust -f tests/locustfile.py \
            --headless \
            --users 1 \
            --spawn-rate 1 \
            --run-time 30s \
            --host http://localhost:8000 \
            || echo "Load test completed"

      - name: Stop services
        if: always()
        run: docker-compose down
