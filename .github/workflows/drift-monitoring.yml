name: üîç Model Drift Monitoring

on:
  schedule:
    - cron: "0 2 * * 1"
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - 'models/**'
      - 'monitoring/**'
      - 'app/**'
      - 'Dockerfile*'
      - '.github/workflows/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  drift-detection:
    name: Check Data & Model Drift
    runs-on: ubuntu-latest
    outputs:
      drift_detected: ${{ steps.drift_check.outputs.drift_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install evidently==0.4.25 plotly scipy

      - name: Run Drift Detection
        id: drift_check
        continue-on-error: true
        run: |
          python monitoring/drift_detection_enhanced.py --mode evidently --days 7
          echo "drift_status=$?" >> $GITHUB_OUTPUT

      - name: Upload Drift Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: drift-report-${{ github.run_number }}
          path: monitoring/reports/drift_report.html
          retention-days: 30

      - name: Upload Drift Metrics
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: drift-metrics-${{ github.run_number }}
          path: monitoring/reports/drift_metrics.json
          retention-days: 90

      - name: Summary
        if: always()
        run: |
          echo "## üîç Drift Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.drift_check.outputs.drift_status }}" != "0" ]; then
            echo "‚ö†Ô∏è **Drift Detected!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No Drift Detected**" >> $GITHUB_STEP_SUMMARY
            echo "üöÄ Proceeding with deployment" >> $GITHUB_STEP_SUMMARY
          fi

  deploy-streamlit-to-huggingface:
    name: Deploy Streamlit App to Hugging Face Space
    runs-on: ubuntu-latest
    needs: drift-detection
    if: needs.drift-detection.outputs.drift_detected == '0'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Hugging Face CLI
        run: |
          python -m pip install --upgrade pip
          pip install huggingface_hub

      - name: Configure Git
        run: |
          git config --global user.email "mahshid.msy179@gmail.com"
          git config --global user.name "Mahshid MSY"

      - name: Log in to Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: huggingface-cli login --token $HF_TOKEN

      - name: Create Space if it doesn't exist
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE: Mahshidmsy/llm-chatbot
        run: |
          huggingface-cli repo create $HF_SPACE --type space --space_sdk docker || echo "Space already exists"

      - name: Prepare Space Repository
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE: Mahshidmsy/llm-chatbot
        run: |
          git clone https://huggingface:${HF_TOKEN}@huggingface.co/spaces/$HF_SPACE space_repo
          cd space_repo
          cp -r ../app ./app
          cp ../Dockerfile.streamlit ./Dockerfile
          cp ../requirements.txt ./requirements.txt
          git add .
          git commit -m "Deploy Streamlit app - automated via GitHub Actions" || echo "No changes to commit"
          git push https://huggingface:${HF_TOKEN}@huggingface.co/spaces/${HF_SPACE} main

      - name: Deployment Summary
        run: |
          echo "## üöÄ Hugging Face Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Streamlit app deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Space URL**: https://huggingface.co/spaces/Mahshidmsy/llm-chatbot" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìù The app will be available in 1-2 minutes after build completes" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify via Email
    runs-on: ubuntu-latest
    needs: [drift-detection, deploy-streamlit-to-huggingface]
    if: always()
    steps:
      - name: Send Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          to: ${{ secrets.ALERT_EMAIL }}
          from: "ML Pipeline <${{ secrets.EMAIL_USER }}>"
          subject: >-
            ${{ needs.deploy-streamlit-to-huggingface.result == 'success' && '‚úÖ Streamlit App Deployed to HF' || '‚ö†Ô∏è Deployment Failed or Skipped' }}
          body: |
            üöÄ Deployment Status Report

            Drift Detection: ${{ needs.drift-detection.outputs.drift_detected == '0' && 'No drift' || 'Drift detected' }}
            Deployment: ${{ needs.deploy-streamlit-to-huggingface.result }}

            üîó Space URL: https://huggingface.co/spaces/Mahshidmsy/llm-chatbot
            ÔøΩÔøΩ Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ‚è±Ô∏è The app will be ready in 1-2 minutes after build completes.
        continue-on-error: true
