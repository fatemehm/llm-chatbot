name: Model Drift Monitoring

on:
  schedule:
    - cron: "0 2 * * 1"
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - 'models/**'
      - 'monitoring/**'
      - 'app/**'
      - 'Dockerfile'
      - '.github/workflows/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  drift-detection:
    name: Check Data & Model Drift
    runs-on: ubuntu-latest
    outputs:
      drift_detected: ${{ steps.drift_check.outputs.drift_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install evidently==0.4.25 plotly scipy

      - name: Run Drift Detection
        id: drift_check
        continue-on-error: true
        run: |
          python monitoring/drift_detection_enhanced.py --mode evidently --days 7
          echo "drift_status=$?" >> $GITHUB_OUTPUT

      - name: Upload Drift Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: drift-report-${{ github.run_number }}
          path: monitoring/reports/drift_report.html
          retention-days: 30

      - name: Upload Drift Metrics
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: drift-metrics-${{ github.run_number }}
          path: monitoring/reports/drift_metrics.json
          retention-days: 90

      - name: Create Issue if Drift Detected
        if: steps.drift_check.outputs.drift_status != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let driftMetrics = {};
            try {
              driftMetrics = JSON.parse(fs.readFileSync('monitoring/reports/drift_metrics.json', 'utf8'));
            } catch (e) {
              console.log('Could not read drift metrics');
            }

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: ' Model Drift Detected - ' + new Date().toISOString().split('T')[0],
              body: `##  Drift Detection Alert

              Data or model drift has been detected in the LLM chatbot.

              **Run Details:**
              - Workflow Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - Date: ${new Date().toISOString()}
              - Branch: ${{ github.ref_name }}

              **Drift Metrics:**
              \`\`\`json
              ${JSON.stringify(driftMetrics, null, 2)}
              \`\`\`

              **Action Required:**
              1. Review the drift report in the workflow artifacts
              2. Investigate the source of drift
              3. Consider retraining: \`python train.py\`
              4. Update baseline if needed

              **Deployment Status:**  Automatic deployment paused due to drift
              `,
              labels: ['drift-alert', 'monitoring', 'ml-ops']
            });

            console.log(\`Created issue #\${issue.data.number}\`);

      - name: Send Email Notification
        if: steps.drift_check.outputs.drift_status != '0'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          subject: " Drift Detected in LLM Chatbot - Run #${{ github.run_number }}"
          to: ${{ secrets.ALERT_EMAIL }}
          from: "ML Pipeline <${{ secrets.EMAIL_USER }}>"
          body: |
            Drift has been detected in the LLM Chatbot model.

            Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Date: ${{ github.event.head_commit.timestamp }}

            Automatic deployment to Hugging Face has been paused.
            Please review the drift report and retrain if necessary.
          priority: high
        continue-on-error: true

      - name: Summary
        if: always()
        run: |
          echo "## Drift Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.drift_check.outputs.drift_status }}" != "0" ]; then
            echo " **Drift Detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚è∏ Automatic deployment paused" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Action items:" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Review drift report artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Investigate data distribution changes" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Run: \`python train.py\` to retrain" >> $GITHUB_STEP_SUMMARY
            echo "- [ ] Update baseline after retraining" >> $GITHUB_STEP_SUMMARY
          else
            echo " **No Drift Detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo " Proceeding with automatic deployment" >> $GITHUB_STEP_SUMMARY
          fi
  deploy-to-huggingface:
    name: Deploy Docker App to Hugging Face Space
    runs-on: ubuntu-latest
    needs: drift-detection
    if: needs.drift-detection.outputs.drift_detected == '0'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Authenticate to Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global user.email "hf-actions@users.noreply.github.com"
          git config --global user.name "HF Actions Bot"
          echo "https://huggingface:${HF_TOKEN}@huggingface.co" > ~/.git-credentials

      - name: Clone Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE: ${{ secrets.HF_SPACE }}
        run: |
          git clone https://huggingface.co/spaces/${HF_SPACE} space_repo
          cd space_repo
          # Copy app and Dockerfile
          cp -r ../app ./app
          cp ../Dockerfile .
          git add .
          git commit -m "Update Docker Space"
          git push https://huggingface:${HF_TOKEN}@huggingface.co/${HF_SPACE} main

      - name: Deployment Summary
        run: |
          echo "## ‚úÖ Hugging Face Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "Model successfully deployed to:" >> $GITHUB_STEP_SUMMARY
          echo "üîó https://huggingface.co/spaces/${{ secrets.HF_SPACE }}" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify via Email
    runs-on: ubuntu-latest
    needs: [drift-detection, deploy-to-huggingface]
    if: always()
    steps:
      - name: Send Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          to: ${{ secrets.ALERT_EMAIL }}
          from: "ML Pipeline <${{ secrets.EMAIL_USER }}>"
          subject: >-
            ${{ needs.deploy-to-huggingface.result == 'success' && '‚úÖ Deployment Succeeded' || '‚ö†Ô∏è Drift Detected ‚Äì Deployment Skipped' }}
          body: |
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Drift Status: ${{ needs.drift-detection.outputs.drift_detected }}
            Hugging Face Space: https://huggingface.co/spaces/${{ secrets.HF_SPACE }}

            Deployment Result: ${{ needs.deploy-to-huggingface.result }}
        continue-on-error: true
